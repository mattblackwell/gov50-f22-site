{
  "hash": "6642fb8800b83362defbd9f153d799a5",
  "result": {
    "markdown": "---\ntitle: \"Gov 50 Cheat Sheet\"\nslug: cheatsheet\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gov50data)\n```\n:::\n\n\n\n## R Basics (Week 1)\n\n### Creating a vector \n\nYou can create a vector using the `c` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Any R code that begins with the # character is a comment\n## Comments are ignored by R\n\nmy_numbers <- c(4, 8, 15, 16, 23, 42) # Anything after # is also a\n# comment\nmy_numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4  8 15 16 23 42\n```\n:::\n:::\n\n\n\n### Installing and loading a package\n\nYou can install a package with the `install.packages` function, passing the name of the package to be installed as a string (that is, in quotes):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\nYou can load a package into the R environment by calling `library()` with the name of package without quotes. You should only have one package per library call. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n### Calling functions from specific packages\n\nWe can also use the `mypackage::` prefix to access package functions without loading:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(head(mtcars))\n```\n\n::: {.cell-output-display}\n|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n|Valiant           | 18.1|   6|  225| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n:::\n:::\n\n\n## Data Visualization (week 1)\n\n### Scatter plot\n\nYou can produce a scatter plot with using the `x` and `y` aesthetics along with the `geom_point()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Smoothed curves \n\nYou can add a smoothed curve that summarizes the relationship between two variables with the `geom_smooth()` function. By default, it uses a  loess smoother to estimated the conditional mean of the y-axis variable as a function of the x-axis variable. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### Adding a regression line \n\n`geom_smooth` can also add a regression line by setting the argument `method = \"lm\"` and we can turn off the shaded regions around the line with `se = FALSE`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() + geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Changing the scale of the axes\n\nIf we want the scale of the x-axis to be logged to stretch out the data we can use the `scale_x_log10()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Adding informative labels to a plot\n\nUse the `labs()` to add informative labels to the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  scale_x_log10() +\n  labs(x = \"Population Density\",\n       y = \"Percent of County Below Poverty Line\",\n       title = \"Poverty and Population Density\",\n       subtitle = \"Among Counties in the Midwest\",\n       source = \"US Census, 2000\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/labels-1.png){width=672}\n:::\n:::\n\n\n### Mapping aesthetics to variables\n\nIf you would like to map an aesthetic to a variable for all geoms in the plot, you can put it in the `aes` call in the `ggplot()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty,\n                     color = state,\n                     fill = state)) +\n  geom_point() +\n  geom_smooth() +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### Mapping aesthetics for a single geom\n\nYou can also map aesthetics for a specific geom using the `mapping` argument to that function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point(mapping = aes(color = state)) +\n  geom_smooth(color = \"black\") +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Setting the aesthetics for all observations\n\nIf you would like to set the color or size or shape of a geom for all data points (that is, not mapped to any variables), be sure to set these outside of `aes()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point(color = \"purple\") +\n  geom_smooth() +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Histograms\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = percbelowpoverty)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/histogram-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "cheatsheet_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}